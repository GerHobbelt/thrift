// Autogenerated by Thrift Compiler (2.5.4-upfluence)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package any

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var GoUnusedProtection__ int

// Attributes:
//   - Type
//   - Value
type Any struct {
	Type  string `thrift:"type,1,required" json:"type"`
	Value []byte `thrift:"value,2,required" json:"value"`
}

func NewAny() *Any {
	return &Any{}
}

var anyStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "Any",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "type",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "value",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *Any) StructDefinition() thrift.StructDefinition {
	return anyStructDefinition
}

func (p *Any) GetType() string {
	return p.Type
}

func (p *Any) SetType(v string) {
	p.Type = v
}

func (p *Any) GetValue() []byte {
	return p.Value
}

func (p *Any) SetValue(v []byte) {
	p.Value = v
}
func (p *Any) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false
	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetType = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetValue = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *Any) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *Any) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *Any) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Any"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Any) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *Any) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *Any) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Any({type: %v, value: %v})",
		p.GetType(),
		p.GetValue(),
	)
}
