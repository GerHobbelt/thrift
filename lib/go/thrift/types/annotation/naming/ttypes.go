// Autogenerated by Thrift Compiler (2.5.4-upfluence)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package naming

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var GoUnusedProtection__ int

// Attributes:
//   - Namespace_
//   - Name
type PreviouslyKnownAs struct {
	Namespace_ *string `thrift:"namespace_,1" json:"namespace_,omitempty"`
	Name       *string `thrift:"name,2" json:"name,omitempty"`
}

func NewPreviouslyKnownAs() *PreviouslyKnownAs {
	return &PreviouslyKnownAs{}
}

var previouslyKnownAsStructDefinition = thrift.StructDefinition{
	Namespace: Namespace,
	AnnotatedDefinition: thrift.AnnotatedDefinition{
		Name:                  "PreviouslyKnownAs",
		LegacyAnnotations:     map[string]string{},
		StructuredAnnotations: []thrift.RegistrableStruct{},
	},
	Fields: []thrift.FieldDefinition{
		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "namespace_",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},

		{
			AnnotatedDefinition: thrift.AnnotatedDefinition{
				Name:                  "name",
				LegacyAnnotations:     map[string]string{},
				StructuredAnnotations: []thrift.RegistrableStruct{},
			},
		},
	},
}

func (p *PreviouslyKnownAs) StructDefinition() thrift.StructDefinition {
	return previouslyKnownAsStructDefinition
}

var PreviouslyKnownAs_Namespace__DEFAULT string

func (p *PreviouslyKnownAs) GetNamespace_() string {
	if !p.IsSetNamespace_() {
		return PreviouslyKnownAs_Namespace__DEFAULT
	}
	return *p.Namespace_
}

func (p *PreviouslyKnownAs) SetNamespace_(v string) {
	p.Namespace_ = &v
}

var PreviouslyKnownAs_Name_DEFAULT string

func (p *PreviouslyKnownAs) GetName() string {
	if !p.IsSetName() {
		return PreviouslyKnownAs_Name_DEFAULT
	}
	return *p.Name
}

func (p *PreviouslyKnownAs) SetName(v string) {
	p.Name = &v
}
func (p *PreviouslyKnownAs) IsSetNamespace_() bool {
	return p.Namespace_ != nil
}

func (p *PreviouslyKnownAs) IsSetName() bool {
	return p.Name != nil
}

func (p *PreviouslyKnownAs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PreviouslyKnownAs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Namespace_ = &v
	}
	return nil
}

func (p *PreviouslyKnownAs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *PreviouslyKnownAs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PreviouslyKnownAs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PreviouslyKnownAs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace_() {
		if err := oprot.WriteFieldBegin("namespace_", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:namespace_: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Namespace_)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.namespace_ (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:namespace_: ", p), err)
		}
	}
	return err
}

func (p *PreviouslyKnownAs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *PreviouslyKnownAs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"PreviouslyKnownAs({namespace_: %v, name: %v})",
		p.GetNamespace_(),
		p.GetName(),
	)
}
