// Autogenerated by Thrift Compiler (2.5.4-upfluence)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package value

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var GoUnusedProtection__ int

type NullValue struct {
}

func NewNullValue() *NullValue {
	return &NullValue{}
}

func (p *NullValue) StructDefinition() thrift.StructDefinition {
	return thrift.StructDefinition{Namespace: "types.value", Name: "NullValue"}
}

func (p *NullValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NullValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NullValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NullValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"NullValue({})",
	)
}

// Attributes:
//   - Values
type ListValue struct {
	Values []*Value `thrift:"values,1,required" json:"values"`
}

func NewListValue() *ListValue {
	return &ListValue{}
}

func (p *ListValue) StructDefinition() thrift.StructDefinition {
	return thrift.StructDefinition{Namespace: "types.value", Name: "ListValue"}
}

func (p *ListValue) GetValues() []*Value {
	return p.Values
}

func (p *ListValue) SetValues(v []*Value) {
	p.Values = v
}
func (p *ListValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValues bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetValues = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Values is not set"))
	}
	return nil
}

func (p *ListValue) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Value, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		_elem0 := NewValue()
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Values = append(p.Values, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err)
	}
	return err
}

func (p *ListValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"ListValue({values: %v})",
		p.GetValues(),
	)
}

// Attributes:
//   - Key
//   - Value
type MapEntry struct {
	Key   *Value `thrift:"key,1,required" json:"key"`
	Value *Value `thrift:"value,2,required" json:"value"`
}

func NewMapEntry() *MapEntry {
	return &MapEntry{}
}

func (p *MapEntry) StructDefinition() thrift.StructDefinition {
	return thrift.StructDefinition{Namespace: "types.value", Name: "MapEntry"}
}

var MapEntry_Key_DEFAULT *Value

func (p *MapEntry) GetKey() *Value {
	if !p.IsSetKey() {
		return MapEntry_Key_DEFAULT
	}
	return p.Key
}

func (p *MapEntry) SetKey(v *Value) {
	p.Key = v
}

var MapEntry_Value_DEFAULT *Value

func (p *MapEntry) GetValue() *Value {
	if !p.IsSetValue() {
		return MapEntry_Value_DEFAULT
	}
	return p.Value
}

func (p *MapEntry) SetValue(v *Value) {
	p.Value = v
}
func (p *MapEntry) IsSetKey() bool {
	return p.Key != nil
}

func (p *MapEntry) IsSetValue() bool {
	return p.Value != nil
}

func (p *MapEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetKey bool = false
	var issetValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetKey = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetValue = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetKey {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"))
	}
	if !issetValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"))
	}
	return nil
}

func (p *MapEntry) ReadField1(iprot thrift.TProtocol) error {
	p.Key = NewValue()
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *MapEntry) ReadField2(iprot thrift.TProtocol) error {
	p.Value = NewValue()
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *MapEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MapEntry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MapEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *MapEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := p.Value.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *MapEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"MapEntry({key: %v, value: %v})",
		p.GetKey(),
		p.GetValue(),
	)
}

// Attributes:
//   - Entries
type MapValue struct {
	Entries []*MapEntry `thrift:"entries,1,required" json:"entries"`
}

func NewMapValue() *MapValue {
	return &MapValue{}
}

func (p *MapValue) StructDefinition() thrift.StructDefinition {
	return thrift.StructDefinition{Namespace: "types.value", Name: "MapValue"}
}

func (p *MapValue) GetEntries() []*MapEntry {
	return p.Entries
}

func (p *MapValue) SetEntries(v []*MapEntry) {
	p.Entries = v
}
func (p *MapValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetEntries bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetEntries = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetEntries {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Entries is not set"))
	}
	return nil
}

func (p *MapValue) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MapEntry, 0, size)
	p.Entries = tSlice
	for i := 0; i < size; i++ {
		_elem1 := NewMapEntry()
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Entries = append(p.Entries, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MapValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MapValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MapValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entries", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entries: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Entries)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Entries {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entries: ", p), err)
	}
	return err
}

func (p *MapValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"MapValue({entries: %v})",
		p.GetEntries(),
	)
}

// Attributes:
//   - Fields
type StructValue struct {
	Fields map[string]*Value `thrift:"fields,1,required" json:"fields"`
}

func NewStructValue() *StructValue {
	return &StructValue{}
}

func (p *StructValue) StructDefinition() thrift.StructDefinition {
	return thrift.StructDefinition{Namespace: "types.value", Name: "StructValue"}
}

func (p *StructValue) GetFields() map[string]*Value {
	return p.Fields
}

func (p *StructValue) SetFields(v map[string]*Value) {
	p.Fields = v
}
func (p *StructValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetFields bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetFields = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetFields {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Fields is not set"))
	}
	return nil
}

func (p *StructValue) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Value, size)
	p.Fields = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		_val3 := NewValue()
		if err := _val3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val3), err)
		}
		p.Fields[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StructValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StructValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StructValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fields", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fields: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Fields)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Fields {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fields: ", p), err)
	}
	return err
}

func (p *StructValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"StructValue({fields: %v})",
		p.GetFields(),
	)
}

// Attributes:
//   - NullValue
//   - StringValue
//   - BinaryValue
//   - IntegerValue
//   - DoubleValue
//   - BoolValue
//   - ListValue
//   - MapValue
//   - StructValue
type Value struct {
	NullValue    *NullValue   `thrift:"null_value,1" json:"null_value,omitempty"`
	StringValue  *string      `thrift:"string_value,2" json:"string_value,omitempty"`
	BinaryValue  []byte       `thrift:"binary_value,3" json:"binary_value,omitempty"`
	IntegerValue *int64       `thrift:"integer_value,4" json:"integer_value,omitempty"`
	DoubleValue  *float64     `thrift:"double_value,5" json:"double_value,omitempty"`
	BoolValue    *bool        `thrift:"bool_value,6" json:"bool_value,omitempty"`
	ListValue    *ListValue   `thrift:"list_value,7" json:"list_value,omitempty"`
	MapValue     *MapValue    `thrift:"map_value,8" json:"map_value,omitempty"`
	StructValue  *StructValue `thrift:"struct_value,9" json:"struct_value,omitempty"`
}

func NewValue() *Value {
	return &Value{}
}

func (p *Value) StructDefinition() thrift.StructDefinition {
	return thrift.StructDefinition{Namespace: "types.value", Name: "Value"}
}

var Value_NullValue_DEFAULT *NullValue

func (p *Value) GetNullValue() *NullValue {
	if !p.IsSetNullValue() {
		return Value_NullValue_DEFAULT
	}
	return p.NullValue
}

func (p *Value) SetNullValue(v *NullValue) {
	p.NullValue = v
}

var Value_StringValue_DEFAULT string

func (p *Value) GetStringValue() string {
	if !p.IsSetStringValue() {
		return Value_StringValue_DEFAULT
	}
	return *p.StringValue
}

func (p *Value) SetStringValue(v string) {
	p.StringValue = &v
}

var Value_BinaryValue_DEFAULT []byte

func (p *Value) GetBinaryValue() []byte {
	return p.BinaryValue
}

func (p *Value) SetBinaryValue(v []byte) {
	p.BinaryValue = v
}

var Value_IntegerValue_DEFAULT int64

func (p *Value) GetIntegerValue() int64 {
	if !p.IsSetIntegerValue() {
		return Value_IntegerValue_DEFAULT
	}
	return *p.IntegerValue
}

func (p *Value) SetIntegerValue(v int64) {
	p.IntegerValue = &v
}

var Value_DoubleValue_DEFAULT float64

func (p *Value) GetDoubleValue() float64 {
	if !p.IsSetDoubleValue() {
		return Value_DoubleValue_DEFAULT
	}
	return *p.DoubleValue
}

func (p *Value) SetDoubleValue(v float64) {
	p.DoubleValue = &v
}

var Value_BoolValue_DEFAULT bool

func (p *Value) GetBoolValue() bool {
	if !p.IsSetBoolValue() {
		return Value_BoolValue_DEFAULT
	}
	return *p.BoolValue
}

func (p *Value) SetBoolValue(v bool) {
	p.BoolValue = &v
}

var Value_ListValue_DEFAULT *ListValue

func (p *Value) GetListValue() *ListValue {
	if !p.IsSetListValue() {
		return Value_ListValue_DEFAULT
	}
	return p.ListValue
}

func (p *Value) SetListValue(v *ListValue) {
	p.ListValue = v
}

var Value_MapValue_DEFAULT *MapValue

func (p *Value) GetMapValue() *MapValue {
	if !p.IsSetMapValue() {
		return Value_MapValue_DEFAULT
	}
	return p.MapValue
}

func (p *Value) SetMapValue(v *MapValue) {
	p.MapValue = v
}

var Value_StructValue_DEFAULT *StructValue

func (p *Value) GetStructValue() *StructValue {
	if !p.IsSetStructValue() {
		return Value_StructValue_DEFAULT
	}
	return p.StructValue
}

func (p *Value) SetStructValue(v *StructValue) {
	p.StructValue = v
}
func (p *Value) CountSetFieldsValue() int {
	count := 0
	if p.IsSetNullValue() {
		count++
	}
	if p.IsSetStringValue() {
		count++
	}
	if p.IsSetBinaryValue() {
		count++
	}
	if p.IsSetIntegerValue() {
		count++
	}
	if p.IsSetDoubleValue() {
		count++
	}
	if p.IsSetBoolValue() {
		count++
	}
	if p.IsSetListValue() {
		count++
	}
	if p.IsSetMapValue() {
		count++
	}
	if p.IsSetStructValue() {
		count++
	}
	return count

}

func (p *Value) Interface() interface{} {
	if p.IsSetNullValue() {
		return p.NullValue
	}
	if p.IsSetStringValue() {
		return p.StringValue
	}
	if p.IsSetBinaryValue() {
		return p.BinaryValue
	}
	if p.IsSetIntegerValue() {
		return p.IntegerValue
	}
	if p.IsSetDoubleValue() {
		return p.DoubleValue
	}
	if p.IsSetBoolValue() {
		return p.BoolValue
	}
	if p.IsSetListValue() {
		return p.ListValue
	}
	if p.IsSetMapValue() {
		return p.MapValue
	}
	if p.IsSetStructValue() {
		return p.StructValue
	}
	return nil

}

func (p *Value) IsSetNullValue() bool {
	return p.NullValue != nil
}

func (p *Value) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *Value) IsSetBinaryValue() bool {
	return p.BinaryValue != nil
}

func (p *Value) IsSetIntegerValue() bool {
	return p.IntegerValue != nil
}

func (p *Value) IsSetDoubleValue() bool {
	return p.DoubleValue != nil
}

func (p *Value) IsSetBoolValue() bool {
	return p.BoolValue != nil
}

func (p *Value) IsSetListValue() bool {
	return p.ListValue != nil
}

func (p *Value) IsSetMapValue() bool {
	return p.MapValue != nil
}

func (p *Value) IsSetStructValue() bool {
	return p.StructValue != nil
}

func (p *Value) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Value) ReadField1(iprot thrift.TProtocol) error {
	p.NullValue = NewNullValue()
	if err := p.NullValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NullValue), err)
	}
	return nil
}

func (p *Value) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StringValue = &v
	}
	return nil
}

func (p *Value) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BinaryValue = v
	}
	return nil
}

func (p *Value) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IntegerValue = &v
	}
	return nil
}

func (p *Value) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DoubleValue = &v
	}
	return nil
}

func (p *Value) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BoolValue = &v
	}
	return nil
}

func (p *Value) ReadField7(iprot thrift.TProtocol) error {
	p.ListValue = NewListValue()
	if err := p.ListValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListValue), err)
	}
	return nil
}

func (p *Value) ReadField8(iprot thrift.TProtocol) error {
	p.MapValue = NewMapValue()
	if err := p.MapValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MapValue), err)
	}
	return nil
}

func (p *Value) ReadField9(iprot thrift.TProtocol) error {
	p.StructValue = NewStructValue()
	if err := p.StructValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructValue), err)
	}
	return nil
}

func (p *Value) Write(oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsValue(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("Value"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Value) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNullValue() {
		if err := oprot.WriteFieldBegin("null_value", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:null_value: ", p), err)
		}
		if err := p.NullValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NullValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:null_value: ", p), err)
		}
	}
	return err
}

func (p *Value) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err := oprot.WriteFieldBegin("string_value", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:string_value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.string_value (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:string_value: ", p), err)
		}
	}
	return err
}

func (p *Value) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBinaryValue() {
		if err := oprot.WriteFieldBegin("binary_value", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:binary_value: ", p), err)
		}
		if err := oprot.WriteBinary(p.BinaryValue); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.binary_value (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:binary_value: ", p), err)
		}
	}
	return err
}

func (p *Value) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntegerValue() {
		if err := oprot.WriteFieldBegin("integer_value", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:integer_value: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IntegerValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.integer_value (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:integer_value: ", p), err)
		}
	}
	return err
}

func (p *Value) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleValue() {
		if err := oprot.WriteFieldBegin("double_value", thrift.DOUBLE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:double_value: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.DoubleValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.double_value (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:double_value: ", p), err)
		}
	}
	return err
}

func (p *Value) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolValue() {
		if err := oprot.WriteFieldBegin("bool_value", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bool_value: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BoolValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bool_value (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bool_value: ", p), err)
		}
	}
	return err
}

func (p *Value) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetListValue() {
		if err := oprot.WriteFieldBegin("list_value", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:list_value: ", p), err)
		}
		if err := p.ListValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:list_value: ", p), err)
		}
	}
	return err
}

func (p *Value) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapValue() {
		if err := oprot.WriteFieldBegin("map_value", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:map_value: ", p), err)
		}
		if err := p.MapValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MapValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:map_value: ", p), err)
		}
	}
	return err
}

func (p *Value) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStructValue() {
		if err := oprot.WriteFieldBegin("struct_value", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:struct_value: ", p), err)
		}
		if err := p.StructValue.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructValue), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:struct_value: ", p), err)
		}
	}
	return err
}

func (p *Value) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"Value({null_value: %v, string_value: %v, binary_value: %v, integer_value: %v, double_value: %v, bool_value: %v, list_value: %v, map_value: %v, struct_value: %v})",
		p.GetNullValue(),
		p.GetStringValue(),
		p.GetBinaryValue(),
		p.GetIntegerValue(),
		p.GetDoubleValue(),
		p.GetBoolValue(),
		p.GetListValue(),
		p.GetMapValue(),
		p.GetStructValue(),
	)
}
