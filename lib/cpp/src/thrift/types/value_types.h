/**
 * Autogenerated by Thrift Compiler (2.5.4-upfluence)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef value_TYPES_H
#define value_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace types { namespace value {

class NullValue;

class ListValue;

class MapEntry;

class MapValue;

class StructValue;

class Value;


class NullValue {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  NullValue(const NullValue&);
  NullValue& operator=(const NullValue&);
  NullValue() {
  }

  virtual ~NullValue() throw();

  bool operator == (const NullValue & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NullValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NullValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NullValue& obj);
};

void swap(NullValue &a, NullValue &b);


class ListValue {
 public:

  static const char* ascii_fingerprint; // = "15B02FE500BAAA2F7672955D36328788";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xB0,0x2F,0xE5,0x00,0xBA,0xAA,0x2F,0x76,0x72,0x95,0x5D,0x36,0x32,0x87,0x88};

  ListValue(const ListValue&);
  ListValue& operator=(const ListValue&);
  ListValue() {
  }

  virtual ~ListValue() throw();
  std::vector<Value>  values;

  void __set_values(const std::vector<Value> & val);

  bool operator == (const ListValue & rhs) const
  {
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const ListValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListValue& obj);
};

void swap(ListValue &a, ListValue &b);


class MapEntry {
 public:

  static const char* ascii_fingerprint; // = "899D86147A70AD678AA6AD12546F0F81";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x9D,0x86,0x14,0x7A,0x70,0xAD,0x67,0x8A,0xA6,0xAD,0x12,0x54,0x6F,0x0F,0x81};

  MapEntry(const MapEntry&);
  MapEntry& operator=(const MapEntry&);
  MapEntry() {
  }

  virtual ~MapEntry() throw();
  Value key;
  Value value;

  void __set_key(const Value& val);

  void __set_value(const Value& val);

  bool operator == (const MapEntry & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MapEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MapEntry& obj);
};

void swap(MapEntry &a, MapEntry &b);


class MapValue {
 public:

  static const char* ascii_fingerprint; // = "CAC56EC2431562E5E990506462023138";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xC5,0x6E,0xC2,0x43,0x15,0x62,0xE5,0xE9,0x90,0x50,0x64,0x62,0x02,0x31,0x38};

  MapValue(const MapValue&);
  MapValue& operator=(const MapValue&);
  MapValue() {
  }

  virtual ~MapValue() throw();
  std::vector<MapEntry>  entries;

  void __set_entries(const std::vector<MapEntry> & val);

  bool operator == (const MapValue & rhs) const
  {
    if (!(entries == rhs.entries))
      return false;
    return true;
  }
  bool operator != (const MapValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MapValue& obj);
};

void swap(MapValue &a, MapValue &b);


class StructValue {
 public:

  static const char* ascii_fingerprint; // = "2378FACF8F84D12EF3E8086302B4C487";
  static const uint8_t binary_fingerprint[16]; // = {0x23,0x78,0xFA,0xCF,0x8F,0x84,0xD1,0x2E,0xF3,0xE8,0x08,0x63,0x02,0xB4,0xC4,0x87};

  StructValue(const StructValue&);
  StructValue& operator=(const StructValue&);
  StructValue() {
  }

  virtual ~StructValue() throw();
  std::map<std::string, Value>  fields;

  void __set_fields(const std::map<std::string, Value> & val);

  bool operator == (const StructValue & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const StructValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StructValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StructValue& obj);
};

void swap(StructValue &a, StructValue &b);

typedef struct _Value__isset {
  _Value__isset() : null_value(false), string_value(false), binary_value(false), integer_value(false), double_value(false), bool_value(false), list_value(false), map_value(false), struct_value(false) {}
  bool null_value :1;
  bool string_value :1;
  bool binary_value :1;
  bool integer_value :1;
  bool double_value :1;
  bool bool_value :1;
  bool list_value :1;
  bool map_value :1;
  bool struct_value :1;
} _Value__isset;

class Value {
 public:

  static const char* ascii_fingerprint; // = "32DB10C593440BD63D470121CACCBC29";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0xDB,0x10,0xC5,0x93,0x44,0x0B,0xD6,0x3D,0x47,0x01,0x21,0xCA,0xCC,0xBC,0x29};

  Value(const Value&);
  Value& operator=(const Value&);
  Value() : string_value(), binary_value(), integer_value(0), double_value(0), bool_value(0) {
  }

  virtual ~Value() throw();
  NullValue null_value;
  std::string string_value;
  std::string binary_value;
  int64_t integer_value;
  double double_value;
  bool bool_value;
  ListValue list_value;
  MapValue map_value;
  StructValue struct_value;

  _Value__isset __isset;

  void __set_null_value(const NullValue& val);

  void __set_string_value(const std::string& val);

  void __set_binary_value(const std::string& val);

  void __set_integer_value(const int64_t val);

  void __set_double_value(const double val);

  void __set_bool_value(const bool val);

  void __set_list_value(const ListValue& val);

  void __set_map_value(const MapValue& val);

  void __set_struct_value(const StructValue& val);

  bool operator == (const Value & rhs) const
  {
    if (!(null_value == rhs.null_value))
      return false;
    if (!(string_value == rhs.string_value))
      return false;
    if (!(binary_value == rhs.binary_value))
      return false;
    if (!(integer_value == rhs.integer_value))
      return false;
    if (!(double_value == rhs.double_value))
      return false;
    if (!(bool_value == rhs.bool_value))
      return false;
    if (!(list_value == rhs.list_value))
      return false;
    if (!(map_value == rhs.map_value))
      return false;
    if (!(struct_value == rhs.struct_value))
      return false;
    return true;
  }
  bool operator != (const Value &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Value & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Value& obj);
};

void swap(Value &a, Value &b);

}} // namespace

#endif
