/**
 * Autogenerated by Thrift Compiler (2.5.4-upfluence)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef naming_TYPES_H
#define naming_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace types { namespace annotation { namespace naming {

class PreviouslyKnownAs;

typedef struct _PreviouslyKnownAs__isset {
  _PreviouslyKnownAs__isset() : namespace_(false), name(false) {}
  bool namespace_ :1;
  bool name :1;
} _PreviouslyKnownAs__isset;

class PreviouslyKnownAs {
 public:

  static const char* ascii_fingerprint; // = "D0297FC5011701BD87898CC36146A565";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x29,0x7F,0xC5,0x01,0x17,0x01,0xBD,0x87,0x89,0x8C,0xC3,0x61,0x46,0xA5,0x65};

  PreviouslyKnownAs(const PreviouslyKnownAs&);
  PreviouslyKnownAs& operator=(const PreviouslyKnownAs&);
  PreviouslyKnownAs() : namespace_(), name() {
  }

  virtual ~PreviouslyKnownAs() throw();
  std::string namespace_;
  std::string name;

  _PreviouslyKnownAs__isset __isset;

  void __set_namespace_(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const PreviouslyKnownAs & rhs) const
  {
    if (__isset.namespace_ != rhs.__isset.namespace_)
      return false;
    else if (__isset.namespace_ && !(namespace_ == rhs.namespace_))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const PreviouslyKnownAs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PreviouslyKnownAs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PreviouslyKnownAs& obj);
};

void swap(PreviouslyKnownAs &a, PreviouslyKnownAs &b);

}}} // namespace

#endif
