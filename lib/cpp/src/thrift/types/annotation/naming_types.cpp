/**
 * Autogenerated by Thrift Compiler (2.5.4-upfluence)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "naming_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace types { namespace annotation { namespace naming {


PreviouslyKnownAs::~PreviouslyKnownAs() throw() {
}


void PreviouslyKnownAs::__set_namespace_(const std::string& val) {
  this->namespace_ = val;
__isset.namespace_ = true;
}

void PreviouslyKnownAs::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

const char* PreviouslyKnownAs::ascii_fingerprint = "D0297FC5011701BD87898CC36146A565";
const uint8_t PreviouslyKnownAs::binary_fingerprint[16] = {0xD0,0x29,0x7F,0xC5,0x01,0x17,0x01,0xBD,0x87,0x89,0x8C,0xC3,0x61,0x46,0xA5,0x65};

uint32_t PreviouslyKnownAs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->namespace_);
          this->__isset.namespace_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PreviouslyKnownAs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PreviouslyKnownAs");

  if (this->__isset.namespace_) {
    xfer += oprot->writeFieldBegin("namespace_", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->namespace_);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PreviouslyKnownAs &a, PreviouslyKnownAs &b) {
  using ::std::swap;
  swap(a.namespace_, b.namespace_);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

PreviouslyKnownAs::PreviouslyKnownAs(const PreviouslyKnownAs& other0) {
  namespace_ = other0.namespace_;
  name = other0.name;
  __isset = other0.__isset;
}
PreviouslyKnownAs& PreviouslyKnownAs::operator=(const PreviouslyKnownAs& other1) {
  namespace_ = other1.namespace_;
  name = other1.name;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PreviouslyKnownAs& obj) {
  using apache::thrift::to_string;
  out << "PreviouslyKnownAs(";
  out << "namespace_="; (obj.__isset.namespace_ ? (out << to_string(obj.namespace_)) : (out << "<null>"));
  out << ", " << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ")";
  return out;
}

}}} // namespace
