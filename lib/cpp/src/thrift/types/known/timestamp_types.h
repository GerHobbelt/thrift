/**
 * Autogenerated by Thrift Compiler (2.5.4-upfluence)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef timestamp_TYPES_H
#define timestamp_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace types { namespace known { namespace timestamp {

class Timestamp;


class Timestamp {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  Timestamp(const Timestamp&);
  Timestamp& operator=(const Timestamp&);
  Timestamp() : seconds(0), nanos(0) {
  }

  virtual ~Timestamp() throw();
  int64_t seconds;
  int32_t nanos;

  void __set_seconds(const int64_t val);

  void __set_nanos(const int32_t val);

  bool operator == (const Timestamp & rhs) const
  {
    if (!(seconds == rhs.seconds))
      return false;
    if (!(nanos == rhs.nanos))
      return false;
    return true;
  }
  bool operator != (const Timestamp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Timestamp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Timestamp& obj);
};

void swap(Timestamp &a, Timestamp &b);

}}} // namespace

#endif
