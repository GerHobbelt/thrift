/**
 * Autogenerated by Thrift Compiler (2.5.4-upfluence)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "any_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace types { namespace known { namespace any {


Any::~Any() throw() {
}


void Any::__set_type(const std::string& val) {
  this->type = val;
}

void Any::__set_value(const std::string& val) {
  this->value = val;
}

const char* Any::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t Any::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t Any::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Any::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Any");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Any &a, Any &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.value, b.value);
}

Any::Any(const Any& other0) {
  type = other0.type;
  value = other0.value;
}
Any& Any::operator=(const Any& other1) {
  type = other1.type;
  value = other1.value;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Any& obj) {
  using apache::thrift::to_string;
  out << "Any(";
  out << "type=" << to_string(obj.type);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}

}}} // namespace
