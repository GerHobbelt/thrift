/**
 * Autogenerated by Thrift Compiler (2.5.4-upfluence)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "timestamp_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace types { namespace known { namespace timestamp {


Timestamp::~Timestamp() throw() {
}


void Timestamp::__set_seconds(const int64_t val) {
  this->seconds = val;
}

void Timestamp::__set_nanos(const int32_t val) {
  this->nanos = val;
}

const char* Timestamp::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t Timestamp::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t Timestamp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_seconds = false;
  bool isset_nanos = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seconds);
          isset_seconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nanos);
          isset_nanos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_seconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nanos)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Timestamp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Timestamp");

  xfer += oprot->writeFieldBegin("seconds", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->seconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nanos", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->nanos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Timestamp &a, Timestamp &b) {
  using ::std::swap;
  swap(a.seconds, b.seconds);
  swap(a.nanos, b.nanos);
}

Timestamp::Timestamp(const Timestamp& other0) {
  seconds = other0.seconds;
  nanos = other0.nanos;
}
Timestamp& Timestamp::operator=(const Timestamp& other1) {
  seconds = other1.seconds;
  nanos = other1.nanos;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Timestamp& obj) {
  using apache::thrift::to_string;
  out << "Timestamp(";
  out << "seconds=" << to_string(obj.seconds);
  out << ", " << "nanos=" << to_string(obj.nanos);
  out << ")";
  return out;
}

}}} // namespace
